pipeline GoodsPipeline {

    GTFSZipExtractor 
        -> ZipArchiveInterpreter
        -> StopPicker
        -> LatinTextFileInterpreter
        -> CSVInterpreter
        -> StopsTableInterpreter
        -> StopsLoader;

    // Work with GTFS data
    // for Jayvee, if you use the FilePicker, do not use a leading dot in file paths, see this bug: https://github.com/jvalue/jayvee/issues/381
    block GTFSZipExtractor oftype HttpExtractor {
        url: "https://gtfs.rhoenenergie-bus.de/GTFS.zip";
    }

    block ZipArchiveInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    // Pick out only stops (from stops.txt)
    //path: "./data/measure/mowesta-dataset-20221107/data.csv";
    block StopPicker oftype FilePicker {
        path: "/stops.txt";
    }

    // Drop rows containing invalid data
    // Use fitting SQLite types (e.g., BIGINT, TEXT or FLOAT) for all columns
    // Write data into a SQLite database called “gtfs.sqlite”, in the table “stops”
    /* 1.
    Download and unzip data
    Use the “data.csv” in the zip file
    */
    block LatinTextFileInterpreter oftype TextFileInterpreter { 
        encoding:"utf8";
    }

    block CSVInterpreter oftype CSVInterpreter {
        enclosing: '"';
        delimiter: ",";
    }

    // Filter data
    // Only keep stops from zone 1645
    valuetype Zone oftype integer {
        constraints: [ Zone1645 ];
    }

    constraint Zone1645 oftype RangeConstraint {
        lowerBound: 1645;
        lowerBoundInclusive: true;
        upperBound: 1645;
        upperBoundInclusive: true;
    }

    // Validate data
    // stop_name must be a text but must maintain german umlauts
    // stop_lat/stop_lon must be a geographic coordinates between -90 and 90, including upper/lower bounds
    valuetype GeographicCoordinate oftype decimal {
        constraints: [ GeographicCoordinateConstraint ];
    }

    constraint GeographicCoordinateConstraint oftype RangeConstraint {
        lowerBound: -90;
        lowerBoundInclusive: true;
        upperBound: 90;
        upperBoundInclusive: true;
    }

    // Only the columns stop_id, stop_name, stop_lat, stop_lon, zone_id with fitting data types
    block StopsTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "stop_id" oftype integer,
            "stop_name" oftype text,
            "stop_lat" oftype GeographicCoordinate,
            "stop_lon" oftype GeographicCoordinate,
            "zone_id" oftype Zone
        ];
    }

    // 6. Write data into a SQLite database called “temperatures.sqlite”, in the table “temperatures”
    block StopsLoader oftype SQLiteLoader {
        table: "stops";
        file: "./gtfs.sqlite";
    }

}